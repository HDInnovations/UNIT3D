<?php

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

uses(TestCase::class);
uses(RefreshDatabase::class);

/**
 * @see \App\Http\Controllers\UserController
 */
test('accept rules returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('accept.rules'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('active returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_active', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.private.active');
    $response->assertViewHas('user');
    $response->assertViewHas('route');
    $response->assertViewHas('active');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('his_upl_cre');
    $response->assertViewHas('his_downl');
    $response->assertViewHas('his_downl_cre');

    // TODO: perform additional assertions
});

test('change api token returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('change_api_token', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withSuccess('Your API Token Was Changed Successfully!'));

    // TODO: perform additional assertions
});

test('change p i d returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('change_pid', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withSuccess('Your PID Was Changed Successfully!'));

    // TODO: perform additional assertions
});

test('change r i d returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('change_rid', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withSuccess('Your RID Was Changed Successfully!'));

    // TODO: perform additional assertions
});

test('change settings returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('change_settings', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors('The URL for the external CSS stylesheet is invalid, try it again with a valid URL.'));

    // TODO: perform additional assertions
});

test('disable notifications returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('notification_disable', ['username' => $user->username]));

    $response->assertRedirect(withSuccess('You Have Disabled Notifications!'));

    // TODO: perform additional assertions
});

test('download history torrents returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('download_history_torrents', ['username' => $user->username]));

    $response->assertRedirect(withErrors('Torrent File Not Found! Please Report This Torrent!'));

    // TODO: perform additional assertions
});

test('downloads returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_downloads', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs($logger);
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('downloads');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('his_upl_cre');
    $response->assertViewHas('his_downl');
    $response->assertViewHas('his_downl_cre');

    // TODO: perform additional assertions
});

test('edit profile returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('user_edit_profile', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors('Because you are uploading a GIF, your avatar must be square!'));

    // TODO: perform additional assertions
});

test('edit profile form returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_edit_profile_form', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.edit_profile');
    $response->assertViewHas('user');
    $response->assertViewHas('route');

    // TODO: perform additional assertions
});

test('enable notifications returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('notification_enable', ['username' => $user->username]));

    $response->assertRedirect(withSuccess('You Have Enabled Notifications!'));

    // TODO: perform additional assertions
});

test('followers returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_followers', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.followers');
    $response->assertViewHas('route');
    $response->assertViewHas('results');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('get bans returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('banlog', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.banlog');
    $response->assertViewHas('user');
    $response->assertViewHas('bans');

    // TODO: perform additional assertions
});

test('make hidden returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_hidden', ['username' => $user->username]));

    $response->assertRedirect(withSuccess('You Have Disappeared Like A Ninja!'));

    // TODO: perform additional assertions
});

test('make private returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_private', ['username' => $user->username]));

    $response->assertRedirect(withSuccess('You Have Gone Private!'));

    // TODO: perform additional assertions
});

test('make public returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_public', ['username' => $user->username]));

    $response->assertRedirect(withSuccess('You Have Gone Public!'));

    // TODO: perform additional assertions
});

test('make visible returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_visible', ['username' => $user->username]));

    $response->assertRedirect(withSuccess('You Have Given Up Your Ninja Ways And Become Visible!'));

    // TODO: perform additional assertions
});

test('my filter returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('myfilter', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertOk();
    $response->assertViewIs();

    // TODO: perform additional assertions
});

test('notification returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_notification', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.notification');
    $response->assertViewHas('user');
    $response->assertViewHas('groups');

    // TODO: perform additional assertions
});

test('posts returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_posts', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.posts');
    $response->assertViewHas('route');
    $response->assertViewHas('results');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('privacy returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_privacy', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.privacy');
    $response->assertViewHas('user');
    $response->assertViewHas('groups');

    // TODO: perform additional assertions
});

test('requested returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_requested', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs($logger);
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('torrentRequests');

    // TODO: perform additional assertions
});

test('resurrections returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_resurrections', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.private.resurrections');
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('resurrections');

    // TODO: perform additional assertions
});

test('security returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_security', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.security');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('seeds returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_seeds', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.private.seeds');
    $response->assertViewHas('user');
    $response->assertViewHas('route');
    $response->assertViewHas('seeds');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('his_upl_cre');
    $response->assertViewHas('his_downl');
    $response->assertViewHas('his_downl_cre');

    // TODO: perform additional assertions
});

test('settings returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_settings', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.settings');
    $response->assertViewHas('user');
    $response->assertViewHas('route');

    // TODO: perform additional assertions
});

test('show returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('users.show', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.profile');
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('groups');
    $response->assertViewHas('followers');
    $response->assertViewHas('history');
    $response->assertViewHas('warnings');
    $response->assertViewHas('hitrun');
    $response->assertViewHas('bonupload');
    $response->assertViewHas('realupload');
    $response->assertViewHas('bondownload');
    $response->assertViewHas('realdownload');
    $response->assertViewHas('requested');
    $response->assertViewHas('filled');
    $response->assertViewHas('invitedBy');

    // TODO: perform additional assertions
});

test('topics returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_topics', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.topics');
    $response->assertViewHas('route');
    $response->assertViewHas('results');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('torrents returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_torrents', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.private.torrents');
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('history');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('his_upl_cre');
    $response->assertViewHas('his_downl');
    $response->assertViewHas('his_downl_cre');

    // TODO: perform additional assertions
});

test('unsatisfieds returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_unsatisfieds', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs($logger);
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('downloads');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('his_upl_cre');
    $response->assertViewHas('his_downl');
    $response->assertViewHas('his_downl_cre');

    // TODO: perform additional assertions
});

test('uploads returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('user_uploads', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs($logger);
    $response->assertViewHas('route');
    $response->assertViewHas('user');
    $response->assertViewHas('uploads');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('his_upl_cre');
    $response->assertViewHas('his_downl');
    $response->assertViewHas('his_downl_cre');

    // TODO: perform additional assertions
});
