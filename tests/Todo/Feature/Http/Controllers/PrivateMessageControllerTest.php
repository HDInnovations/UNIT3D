<?php

use App\Models\PrivateMessage;
use App\Models\User;
use Tests\TestCase;

uses(TestCase::class);

/**
 * @see \App\Http\Controllers\PrivateMessageController
 */
test('delete private message returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $private_message = PrivateMessage::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('delete-pm', ['id' => $private_message->id]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withSuccess('PM Was Deleted Successfully!'));

    // TODO: perform additional assertions
});

test('get private message by id returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $private_message = PrivateMessage::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('message', ['id' => $private_message->id]));

    $response->assertOk();
    $response->assertViewIs('pm.message');
    $response->assertViewHas('pm');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('get private messages returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('inbox'));

    $response->assertOk();
    $response->assertViewIs('pm.inbox');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('get private messages sent returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('outbox'));

    $response->assertOk();
    $response->assertViewIs('pm.outbox');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('make private message returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('create'));

    $response->assertOk();
    $response->assertViewIs('pm.send');
    $response->assertViewHas('user');
    $response->assertViewHas('receiver_id');
    $response->assertViewHas('username');

    // TODO: perform additional assertions
});

test('mark all as read returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('mark-all-read'));

    $response->assertRedirect(withSuccess('Your Messages Have All Been Marked As Read!'));

    // TODO: perform additional assertions
});

test('reply private message returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $private_message = PrivateMessage::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('reply-pm', ['id' => $private_message->id]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors($v->errors()));

    // TODO: perform additional assertions
});

test('search p m inbox returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('searchPMInbox'), [
        // TODO: send request data
    ]);

    $response->assertOk();
    $response->assertViewIs('pm.inbox');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('search p m outbox returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('searchPMOutbox'), [
        // TODO: send request data
    ]);

    $response->assertOk();
    $response->assertViewIs('pm.outbox');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('send private message returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('send-pm'), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors($v->errors()));

    // TODO: perform additional assertions
});
