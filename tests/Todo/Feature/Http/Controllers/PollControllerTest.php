<?php

use App\Models\Poll;
use App\Models\User;
use Tests\TestCase;

uses(TestCase::class);

/**
 * @see \App\Http\Controllers\PollController
 */
test('index returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('polls'));

    $response->assertOk();
    $response->assertViewIs('poll.latest');
    $response->assertViewHas('polls');

    // TODO: perform additional assertions
});

test('result returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $poll = Poll::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('poll_results', ['id' => $poll->id]));

    $response->assertOk();
    $response->assertViewIs('poll.result');

    // TODO: perform additional assertions
});

test('show returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $poll = Poll::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('poll', ['id' => $poll->id]));

    $response->assertRedirect(withInfo('You have already vote on this poll. Here are the results.'));

    // TODO: perform additional assertions
});

test('vote returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post('polls/vote', [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors('Bro have already vote on this poll. Your vote has not been counted.'));

    // TODO: perform additional assertions
});

test('vote validates with a form request', function () {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\PollController::class,
        'vote',
        \App\Http\Requests\VoteOnPoll::class
    );
});
