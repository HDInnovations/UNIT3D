<?php

use App\Models\Topic;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

uses(TestCase::class);
uses(RefreshDatabase::class);

/**
 * @see \App\Http\Controllers\TopicController
 */
test('add form returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_new_topic_form', ['id' => $topic->id]));

    $response->assertRedirect(withErrors('You Cannot Start A New Topic Here!'));

    // TODO: perform additional assertions
});

test('close topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_close', ['id' => $topic->id]));

    $response->assertRedirect(withSuccess('This Topic Is Now Closed!'));

    // TODO: perform additional assertions
});

test('delete topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_delete_topic', ['id' => $topic->id]));

    $response->assertRedirect(withSuccess('This Topic Is Now Deleted!'));

    // TODO: perform additional assertions
});

test('edit form returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_edit_topic_form', ['id' => $topic->id]));

    $response->assertOk();
    $response->assertViewIs('forum.edit_topic');
    $response->assertViewHas('topic');
    $response->assertViewHas('categories');

    // TODO: perform additional assertions
});

test('edit topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('forum_edit_topic', ['id' => $topic->id]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withSuccess('Topic Successfully Edited'));

    // TODO: perform additional assertions
});

test('new topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('forum_new_topic', ['id' => $topic->id]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors('You Cannot Start A New Topic Here!'));

    // TODO: perform additional assertions
});

test('open topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_open', ['id' => $topic->id]));

    $response->assertRedirect(withSuccess('This Topic Is Now Open!'));

    // TODO: perform additional assertions
});

test('pin topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_pin_topic', ['id' => $topic->id]));

    $response->assertRedirect(withSuccess('This Topic Is Now Pinned!'));

    // TODO: perform additional assertions
});

test('topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_topic', ['id' => $topic->id]));

    $response->assertRedirect(withErrors('You Do Not Have Access To Read This Topic!'));

    // TODO: perform additional assertions
});

test('unpin topic returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $topic = Topic::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('forum_unpin_topic', ['id' => $topic->id]));

    $response->assertRedirect(withSuccess('This Topic Is Now Unpinned!'));

    // TODO: perform additional assertions
});
