<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\Page;
use App\Models\User;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PageController
 */
class PageControllerTest extends TestCase
{
    public function testAboutReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('about'));

        $response->assertOk();
        $response->assertViewIs('page.aboutus');

        // TODO: perform additional assertions
    }

    public function testBlacklistReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('blacklist'));

        $response->assertOk();
        $response->assertViewIs('page.blacklist');
        $response->assertViewHas('clients');
        $response->assertViewHas('browsers');

        // TODO: perform additional assertions
    }

    public function testEmailListReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('emaillist'));

        $response->assertOk();
        $response->assertViewIs('page.emaillist');
        $response->assertViewHas('whitelist');
        $response->assertViewHas('blacklist');

        // TODO: perform additional assertions
    }

    public function testIndexReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('pages.index'));

        $response->assertOk();
        $response->assertViewIs('page.index');
        $response->assertViewHas('pages');

        // TODO: perform additional assertions
    }

    public function testInternalReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('internal'));

        $response->assertOk();
        $response->assertViewIs('page.internal');
        $response->assertViewHas('internal');

        // TODO: perform additional assertions
    }

    public function testShowReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = Page::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('pages.show', ['id' => $page->id]));

        $response->assertOk();
        $response->assertViewIs('page.page');
        $response->assertViewHas('page');

        // TODO: perform additional assertions
    }

    public function testStaffReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('staff'));

        $response->assertOk();
        $response->assertViewIs('page.staff');
        $response->assertViewHas('staff');

        // TODO: perform additional assertions
    }

    // test cases...
}
