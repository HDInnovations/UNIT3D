<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\RequestController
 */
class RequestControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function add_bonus_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('bounty.store', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors($v->errors()));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function requests_create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests.create'));

        $response->assertOk();
        $response->assertViewIs('requests.create');
        $response->assertViewHas('categories');
        $response->assertViewHas('types');
        $response->assertViewHas('user');
        $response->assertViewHas('title');
        $response->assertViewHas('imdb');
        $response->assertViewHas('tmdb');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function approve_request_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests.approve', ['id' => $id]));

        $response->assertRedirect(withErrors('Seems this request was already approved'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function claim_request_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('requests.claims.store', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess('Request Successfully Claimed'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_request_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->delete(route('requests.deleted', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess("You have deleted {$name}"));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function requests_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests.edit', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('requests.edit');
        $response->assertViewHas('categories');
        $response->assertViewHas('types');
        $response->assertViewHas('user');
        $response->assertViewHas('torrentRequest');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function faceted_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('requests/filter');

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function requests_fill_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('requests.fill', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('The torrent info_hash you are trying to use is valid in our database but is still pending moderation. Please wait for your torrent to be approved and then try again.'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function requests_reject_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests.reject', ['id' => $id]));

        $response->assertRedirect(withErrors('Seems this request was already rejected'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function request_show_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('request.show', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('requests.show');
        $response->assertViewHas('torrentRequest');
        $response->assertViewHas('voters');
        $response->assertViewHas('user');
        $response->assertViewHas('comments');
        $response->assertViewHas('carbon');
        $response->assertViewHas('meta');
        $response->assertViewHas('torrentRequestClaim');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function requests_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests'));

        $response->assertOk();
        $response->assertViewIs('requests.requests');
        $response->assertViewHas('torrentRequests');
        $response->assertViewHas('repository');
        $response->assertViewHas('user');
        $response->assertViewHas('num_req');
        $response->assertViewHas('num_fil');
        $response->assertViewHas('num_unfil');
        $response->assertViewHas('total_bounty');
        $response->assertViewHas('claimed_bounty');
        $response->assertViewHas('unclaimed_bounty');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function reset_request_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests.reset', ['id' => $id]));

        $response->assertRedirect(withSuccess('The request has been reset!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function unclaim_request_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->delete(route('requests.claims.destroy', ['id' => $id]));

        $response->assertRedirect(withSuccess('Request Successfully Un-Claimed'));

        // TODO: perform additional assertions
    }

    // test cases...
}
