<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\RequestController
 */
class RequestControllerTest extends TestCase
{
    use RefreshDatabase;

    public function testAddBonusReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('add_votes', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors($v->errors()));

        // TODO: perform additional assertions
    }

    public function testAddRequestFormReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('add_request_form'));

        $response->assertOk();
        $response->assertViewIs('requests.add_request');
        $response->assertViewHas('categories');
        $response->assertViewHas('types');
        $response->assertViewHas('user');
        $response->assertViewHas('title');
        $response->assertViewHas('imdb');
        $response->assertViewHas('tmdb');

        // TODO: perform additional assertions
    }

    public function testApproveRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('approveRequest', ['id' => $id]));

        $response->assertRedirect(withErrors('Seems this request was already approved'));

        // TODO: perform additional assertions
    }

    public function testClaimRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('claimRequest', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess('Request Successfully Claimed'));

        // TODO: perform additional assertions
    }

    public function testDeleteRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('deleteRequest', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess("You have deleted {$name}"));

        // TODO: perform additional assertions
    }

    public function testEditRequestFormReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('edit_request_form', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('requests.edit_request');
        $response->assertViewHas('categories');
        $response->assertViewHas('types');
        $response->assertViewHas('user');
        $response->assertViewHas('torrentRequest');

        // TODO: perform additional assertions
    }

    public function testFacetedReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('requests/filter');

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    public function testFillRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('fill_request', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('The torrent info_hash you are trying to use is valid in our database but is still pending moderation. Please wait for your torrent to be approved and then try again.'));

        // TODO: perform additional assertions
    }

    public function testRejectRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('rejectRequest', ['id' => $id]));

        $response->assertRedirect(withErrors('Seems this request was already rejected'));

        // TODO: perform additional assertions
    }

    public function testRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('request', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('requests.request');
        $response->assertViewHas('torrentRequest');
        $response->assertViewHas('voters');
        $response->assertViewHas('user');
        $response->assertViewHas('comments');
        $response->assertViewHas('carbon');
        $response->assertViewHas('meta');
        $response->assertViewHas('torrentRequestClaim');

        // TODO: perform additional assertions
    }

    public function testRequestsReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('requests'));

        $response->assertOk();
        $response->assertViewIs('requests.requests');
        $response->assertViewHas('torrentRequests');
        $response->assertViewHas('repository');
        $response->assertViewHas('user');
        $response->assertViewHas('num_req');
        $response->assertViewHas('num_fil');
        $response->assertViewHas('num_unfil');
        $response->assertViewHas('total_bounty');
        $response->assertViewHas('claimed_bounty');
        $response->assertViewHas('unclaimed_bounty');

        // TODO: perform additional assertions
    }

    public function testResetRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('resetRequest', ['id' => $id]));

        $response->assertRedirect(withSuccess('The request has been reset!'));

        // TODO: perform additional assertions
    }

    public function testUnclaimRequestReturnsAnOkResponse()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('unclaimRequest', ['id' => $id]));

        $response->assertRedirect(withSuccess('Request Successfully Un-Claimed'));

        // TODO: perform additional assertions
    }

    // test cases...
}
