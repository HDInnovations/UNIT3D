<?php

use App\Models\Rss;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

uses(TestCase::class);
uses(RefreshDatabase::class);

/**
 * @see \App\Http\Controllers\Staff\RssController
 */
test('create returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.rss.create'));

    $response->assertOk();
    $response->assertViewIs('Staff.rss.create');
    $response->assertViewHas('torrent_repository');
    $response->assertViewHas('categories');
    $response->assertViewHas('types');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('destroy returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $rss = Rss::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->delete(route('staff.rss.destroy', ['id' => $rss->id]));

    $response->assertRedirect(withSuccess('RSS Feed Deleted!'));
    $this->assertDeleted($staff);

    // TODO: perform additional assertions
});

test('edit returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $rss = Rss::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.rss.edit', ['id' => $rss->id]));

    $response->assertOk();
    $response->assertViewIs('Staff.rss.edit');
    $response->assertViewHas('torrent_repository');
    $response->assertViewHas('categories');
    $response->assertViewHas('types');
    $response->assertViewHas('user');
    $response->assertViewHas('rss');

    // TODO: perform additional assertions
});

test('index returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.rss.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.rss.index');
    $response->assertViewHas('hash');
    $response->assertViewHas('public_rss');

    // TODO: perform additional assertions
});

test('store returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('staff.rss.store'), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors($error));

    // TODO: perform additional assertions
});

test('update returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $rss = Rss::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->patch(route('staff.rss.update', ['id' => $rss->id]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors($error));

    // TODO: perform additional assertions
});
