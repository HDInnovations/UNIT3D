<?php

use App\Models\User;
use Tests\TestCase;

uses(TestCase::class);

/**
 * @see \App\Http\Controllers\Staff\ModerationController
 */
test('approve returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.moderation.approve', ['id' => $id]));

    $response->assertRedirect(withSuccess('Torrent Approved'));

    // TODO: perform additional assertions
});

test('index returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.moderation.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.moderation.index');
    $response->assertViewHas('current');
    $response->assertViewHas('pending');
    $response->assertViewHas('postponed');
    $response->assertViewHas('rejected');

    // TODO: perform additional assertions
});

test('postpone returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('staff.moderation.postpone'), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors($v->errors()));

    // TODO: perform additional assertions
});

test('reject returns an ok response', function () {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('staff.moderation.reject'), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withErrors($v->errors()));

    // TODO: perform additional assertions
});
