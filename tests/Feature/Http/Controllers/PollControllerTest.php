<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PollController
 */
class PollControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $polls = \App\Models\Poll::factory()->times(3)->create();

        $response = $this->get(route('polls'));

        $response->assertOk();
        $response->assertViewIs('poll.latest');
        $response->assertViewHas('polls', $polls);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function result_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $poll = \App\Models\Poll::factory()->create();

        $response = $this->get(route('poll_results', ['id' => $poll->id]));

        $response->assertOk();
        $response->assertViewIs('poll.result');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $poll = \App\Models\Poll::factory()->create();

        $response = $this->get(route('poll', ['id' => $poll->id]));

        $response->assertOk();
        $response->assertViewIs('poll.show');
        $response->assertViewHas('poll', $poll);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function vote_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $option = \App\Models\Option::factory()->create();

        $response = $this->post('polls/vote', [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function vote_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\PollController::class,
            'vote',
            \App\Http\Requests\VoteOnPoll::class
        );
    }

    // test cases...
}
