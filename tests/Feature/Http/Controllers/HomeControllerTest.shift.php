<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\HomeController
 */
class HomeControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $personalFreeleech = \App\Models\PersonalFreeleech::factory()->create();
        $poll = \App\Models\Poll::factory()->create();
        $articles = \App\Models\Article::factory()->times(3)->create();
        $torrents = \App\Models\Torrent::factory()->times(3)->create();
        $topics = \App\Models\Topic::factory()->times(3)->create();
        $posts = \App\Models\Post::factory()->times(3)->create();
        $users = \App\Models\User::factory()->times(3)->create();
        $roles = \App\Models\Role::factory()->times(3)->create();
        $featuredTorrents = \App\Models\FeaturedTorrent::factory()->times(3)->create();
        $freeleechTokens = \App\Models\FreeleechToken::factory()->times(3)->create();
        $bookmarks = \App\Models\Bookmark::factory()->times(3)->create();

        $response = $this->get(route('home.index'));

        $response->assertOk();
        $response->assertViewIs('home.index');
        $response->assertViewHas('user');
        $response->assertViewHas('personal_freeleech');
        $response->assertViewHas('users', $users);
        $response->assertViewHas('roles', $roles);
        $response->assertViewHas('articles', $articles);
        $response->assertViewHas('newest');
        $response->assertViewHas('seeded');
        $response->assertViewHas('dying');
        $response->assertViewHas('leeched');
        $response->assertViewHas('dead');
        $response->assertViewHas('topics', $topics);
        $response->assertViewHas('posts', $posts);
        $response->assertViewHas('featured');
        $response->assertViewHas('poll', $poll);
        $response->assertViewHas('uploaders');
        $response->assertViewHas('past_uploaders');
        $response->assertViewHas('freeleech_tokens');
        $response->assertViewHas('bookmarks', $bookmarks);

        // TODO: perform additional assertions
    }

    // test cases...
}
