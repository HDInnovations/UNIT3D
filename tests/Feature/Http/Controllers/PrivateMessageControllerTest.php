<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PrivateMessageController
 */
class PrivateMessageControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function delete_private_message_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessage = \App\Models\PrivateMessage::factory()->create();

        $response = $this->post(route('delete-pm', ['id' => $privateMessage->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function empty_inbox_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->delete(route('empty-inbox'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_private_message_by_id_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessage = \App\Models\PrivateMessage::factory()->create();

        $response = $this->get(route('message', ['id' => $privateMessage->id]));

        $response->assertOk();
        $response->assertViewIs('pm.message');
        $response->assertViewHas('pm');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_private_messages_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

        $response = $this->get(route('inbox'));

        $response->assertOk();
        $response->assertViewIs('pm.inbox');
        $response->assertViewHas('pms');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_private_messages_sent_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

        $response = $this->get(route('outbox'));

        $response->assertOk();
        $response->assertViewIs('pm.outbox');
        $response->assertViewHas('pms');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function make_private_message_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('create'));

        $response->assertOk();
        $response->assertViewIs('pm.send');
        $response->assertViewHas('user');
        $response->assertViewHas('receiver_id');
        $response->assertViewHas('username');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function mark_all_as_read_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

        $response = $this->post(route('mark-all-read'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function reply_private_message_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessage = \App\Models\PrivateMessage::factory()->create();

        $response = $this->post(route('reply-pm', ['id' => $privateMessage->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function search_p_m_inbox_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

        $response = $this->post(route('searchPMInbox'), [
            // TODO: send request data
        ]);

        $response->assertOk();
        $response->assertViewIs('pm.inbox');
        $response->assertViewHas('pms');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function search_p_m_outbox_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

        $response = $this->post(route('searchPMOutbox'), [
            // TODO: send request data
        ]);

        $response->assertOk();
        $response->assertViewIs('pm.outbox');
        $response->assertViewHas('pms');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function send_private_message_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->post(route('send-pm'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
