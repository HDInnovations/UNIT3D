<?php

namespace Tests\Feature\Http\Controllers\Staff;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Staff\ResolutionController
 */
class ResolutionControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('staff.resolutions.create'));

        $response->assertOk();
        $response->assertViewIs('Staff.resolution.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resolution = \App\Models\Resolution::factory()->create();

        $response = $this->delete(route('staff.resolutions.destroy', ['id' => $resolution->id]));

        $response->assertOk();
        $this->assertDeleted($staff.resolution);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resolution = \App\Models\Resolution::factory()->create();

        $response = $this->get(route('staff.resolutions.edit', ['id' => $resolution->id]));

        $response->assertOk();
        $response->assertViewIs('Staff.resolution.edit');
        $response->assertViewHas('resolution', $resolution);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resolutions = \App\Models\Resolution::factory()->times(3)->create();

        $response = $this->get(route('staff.resolutions.index'));

        $response->assertOk();
        $response->assertViewIs('Staff.resolution.index');
        $response->assertViewHas('resolutions', $resolutions);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('staff.resolutions.store'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resolution = \App\Models\Resolution::factory()->create();

        $response = $this->patch(route('staff.resolutions.update', ['id' => $resolution->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
